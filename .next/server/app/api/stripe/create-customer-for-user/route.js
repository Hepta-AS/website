(()=>{var e={};e.id=7245,e.ids=[7245],e.modules={47495:e=>{function t(e){var t=Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=47495,e.exports=t},72934:e=>{"use strict";e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{"use strict";e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{"use strict";e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{"use strict";e.exports=require("buffer")},61282:e=>{"use strict";e.exports=require("child_process")},84770:e=>{"use strict";e.exports=require("crypto")},17702:e=>{"use strict";e.exports=require("events")},32615:e=>{"use strict";e.exports=require("http")},35240:e=>{"use strict";e.exports=require("https")},98216:e=>{"use strict";e.exports=require("net")},68621:e=>{"use strict";e.exports=require("punycode")},76162:e=>{"use strict";e.exports=require("stream")},82452:e=>{"use strict";e.exports=require("tls")},17360:e=>{"use strict";e.exports=require("url")},21764:e=>{"use strict";e.exports=require("util")},71568:e=>{"use strict";e.exports=require("zlib")},58359:()=>{},93739:()=>{},36743:(e,t,r)=>{"use strict";r.r(t),r.d(t,{originalPathname:()=>S,patchFetch:()=>I,requestAsyncStorage:()=>d,routeModule:()=>m,serverHooks:()=>_,staticGenerationAsyncStorage:()=>g});var s={};r.r(s),r.d(s,{POST:()=>p});var i=r(49303),o=r(88716),n=r(60670),a=r(87070),c=r(20344),l=r(71615),u=r(69206);async function p(e){try{let t;let r=(0,c.createRouteHandlerClient)({cookies:l.cookies}),{data:{user:s},error:i}=await r.auth.getUser();if(i||!s)return console.error("Auth error or no user:",i),a.NextResponse.json({error:"User not authenticated or session expired"},{status:401});let o=s.id,n=s.email,{name:p}=await e.json().catch(()=>({name:void 0})),m=p||s.user_metadata?.full_name;if(!o||!n)return a.NextResponse.json({error:"User ID or email missing from session"},{status:400});let{data:d,error:g}=await r.from("profiles").select("stripe_customer_id, id").eq("user_id",o).single();if(g&&"PGRST116"!==g.code)return console.error("Error fetching profile:",g),a.NextResponse.json({error:`Error fetching profile: ${g.message}`},{status:500});if(d?.stripe_customer_id)return a.NextResponse.json({customerId:d.stripe_customer_id});let _=await (0,u.wK)(n,m,{supabaseUUID:o});if("error"in _)return console.error("Failed to create Stripe customer:",_.message),a.NextResponse.json({error:`Failed to create Stripe customer: ${_.message}`},{status:500});if(!_.id)return console.error("Stripe customer created but ID is missing:",_),a.NextResponse.json({error:"Stripe customer creation returned invalid data"},{status:500});let S={user_id:o,stripe_customer_id:_.id,updated_at:new Date().toISOString()};d&&d.id?t={...S,id:d.id}:(t={...S},m&&(t.name=m));let{error:I}=await r.from("profiles").upsert(t,{onConflict:"user_id"});if(I)return console.error("Error saving customer ID to profile:",I),a.NextResponse.json({error:`Error saving Stripe customer ID: ${I.message}`},{status:500});return a.NextResponse.json({customerId:_.id})}catch(e){return console.error("Unhandled error in create Stripe customer endpoint:",e),a.NextResponse.json({error:`Failed to create Stripe customer (unhandled): ${e.message}`},{status:500})}}let m=new i.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/stripe/create-customer-for-user/route",pathname:"/api/stripe/create-customer-for-user",filename:"route",bundlePath:"app/api/stripe/create-customer-for-user/route"},resolvedPagePath:"/Users/alexanderamundsen/hepta/hepta-3/app/api/stripe/create-customer-for-user/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:d,staticGenerationAsyncStorage:g,serverHooks:_}=m,S="/api/stripe/create-customer-for-user/route";function I(){return(0,n.patchFetch)({serverHooks:_,staticGenerationAsyncStorage:g})}},69206:(e,t,r)=>{"use strict";r.d(t,{Ag:()=>i,Ce:()=>u,Gl:()=>c,Z$:()=>l,a7:()=>p,wK:()=>a,zu:()=>m});var s=r(48472);let i=(()=>{let e="sk_test_51NTj6ECBZbubqLlTavZEEYr8YqLtMwVYfzIY8EyT3kXY2yuSv6z7hsiQ2omjZnQ1TMIFee3emq7HIcMAe4rWdAoc00CZhpLtEf";if(console.log("\n--- DEBUG: lib/stripe.ts -> getStripeInstance ---"),console.log("NODE_ENV:","production"),console.log("Raw STRIPE_SECRET_KEY from env:",e),!e)return console.warn("⚠️ lib/stripe.ts: STRIPE_SECRET_KEY is NOT SET in environment variables. Stripe operations will be mocked or fail."),null;if(e.startsWith("sk_live_"))console.warn("\uD83D\uDD34 lib/stripe.ts: WARNING: Attempting to use a LIVE Stripe key (sk_live_).");else if(e.startsWith("sk_test_"))console.log("✅ lib/stripe.ts: Using a TEST Stripe key (sk_test_). This is good for development.");else{let t=e.length>14?e.substring(0,7)+"..."+e.substring(e.length-4):e;return console.warn(`⚠️ lib/stripe.ts: STRIPE_SECRET_KEY ("${t}") does not look like a valid Stripe secret key (should start with sk_test_ or sk_live_).`),null}try{let t=e.length>14?e.substring(0,7)+"..."+e.substring(e.length-4):e;console.log(`lib/stripe.ts: Attempting to initialize Stripe with API key: ${t}`);let r=new s.Z(e,{apiVersion:"2023-10-16",typescript:!0});return console.log("✅ lib/stripe.ts: Stripe initialized successfully."),r}catch(e){return console.error("❌ lib/stripe.ts: Failed to initialize Stripe with API key. Error:",e),null}})(),o=(e,...t)=>{},n=e=>Math.round(100*e),a=async(e,t,r)=>{if(o("createCustomer - Start",{email:e,name:t,metadata:r}),console.log("--- DEBUG: lib/stripe.ts -> createCustomer ---"),console.log("Is 'stripe' object initialized here?",i?"YES":"NO - Stripe key likely missing/invalid in env!"),!i)return console.warn("⚠️ lib/stripe.ts: Stripe instance is null in createCustomer. Returning MOCK customer."),{id:"cus_mock_STRIPE_NULL_"+Date.now().toString(36)+Math.random().toString(36).substring(2),email:e,name:t,metadata:r,object:"customer",created:Math.floor(Date.now()/1e3),error:!0,message:"Stripe not initialized (null instance), returning mock customer."};try{console.log(`lib/stripe.ts: Attempting REAL Stripe API call: customers.create for email: ${e}`);let s={email:e};t&&(s.name=t),r&&(s.metadata=r);let o=await i.customers.create(s);return console.log("✅ lib/stripe.ts: Stripe customer created successfully via API. ID:",o.id),o}catch(s){return console.error("❌ lib/stripe.ts: Error calling Stripe API (customers.create):",s),{id:"cus_mock_API_ERROR_"+Date.now().toString(36)+Math.random().toString(36).substring(2),email:e,name:t,metadata:r,object:"customer",created:Math.floor(Date.now()/1e3),error:!0,message:s.message||"Unknown error during Stripe API call to create customer"}}},c=async(e,t="nok",r)=>{if(o("createPaymentIntent - Start",{amount:e,currency:t,customerId:r}),console.log("--- DEBUG: lib/stripe.ts -> createPaymentIntent ---"),console.log("Is 'stripe' object initialized here?",i?"YES":"NO - Stripe key likely missing/invalid in env!"),!i){console.warn("⚠️ lib/stripe.ts: Stripe instance is null in createPaymentIntent. Returning MOCK Payment Intent.");let s="pi_mock_secret_STRIPE_NULL_"+Date.now().toString(36)+Math.random().toString(36).substring(2);return{id:"pi_mock_STRIPE_NULL_"+Date.now().toString(36)+Math.random().toString(36).substring(2),amount:n(e),currency:t,client_secret:s,customer:r,status:"requires_payment_method",object:"payment_intent",error:!0,message:"Stripe not initialized (null instance), returning mock payment intent."}}try{console.log(`lib/stripe.ts: Attempting REAL Stripe API call: paymentIntents.create. Amount: ${e}, Currency: ${t}, CustomerID: ${r||"None"}`);let s={amount:n(e),currency:t,automatic_payment_methods:{enabled:!0}};r&&(s.customer=r);let o=await i.paymentIntents.create(s);return console.log("✅ lib/stripe.ts: REAL Stripe Payment Intent created. Client Secret starts with:",o.client_secret?.substring(0,15)+"..."),o}catch(i){console.error("❌ lib/stripe.ts: Error calling Stripe API (paymentIntents.create):",i);let s="pi_mock_secret_API_ERROR_"+Date.now().toString(36)+Math.random().toString(36).substring(2);return{id:"pi_mock_API_ERROR_"+Date.now().toString(36)+Math.random().toString(36).substring(2),amount:n(e),currency:t,client_secret:s,customer:r,status:"requires_payment_method",object:"payment_intent",error:!0,message:i.message||"Unknown error during Stripe API call to create payment intent"}}},l=async(e,t,r,s="nok")=>{if(o("createInvoice - Start",{customerId:e,description:t,amount:r,currency:s}),console.log("--- DEBUG: lib/stripe.ts -> createInvoice --- 'stripe' initialized?",i?"YES":"NO"),!i)return console.warn("⚠️ lib/stripe.ts: Stripe instance is null in createInvoice. Returning MOCK invoice."),{id:"in_mock_STRIPE_NULL_"+Date.now().toString(36),customer:e,amount_due:n(r),currency:s,description:t,status:"open",due_date:Math.floor(Date.now()/1e3)+2592e3,created:Math.floor(Date.now()/1e3),error:!0,message:"Stripe not initialized"};try{console.log(`lib/stripe.ts: Attempting REAL Stripe API call for createInvoice. Customer: ${e}`),await i.invoiceItems.create({customer:e,amount:n(r),currency:s,description:t});let o=await i.invoices.create({customer:e,auto_advance:!0,collection_method:"send_invoice",days_until_due:30}),a=await i.invoices.finalizeInvoice(o.id);return await i.invoices.sendInvoice(a.id),console.log("✅ lib/stripe.ts: REAL Stripe Invoice created and sent. ID:",a.id),a}catch(i){return console.error("❌ lib/stripe.ts: Error creating REAL Stripe invoice:",i),{id:"in_mock_API_ERROR_"+Date.now().toString(36),customer:e,amount_due:n(r),currency:s,description:t,status:"open",due_date:Math.floor(Date.now()/1e3)+2592e3,created:Math.floor(Date.now()/1e3),error:!0,message:i.message||"Unknown API error creating invoice"}}},u=async e=>{if(o("getCustomerInvoices - Start",{customerId:e}),console.log("--- DEBUG: lib/stripe.ts -> getCustomerInvoices --- 'stripe' initialized?",i?"YES":"NO"),!i)return console.warn("⚠️ lib/stripe.ts: Stripe instance is null in getCustomerInvoices. Returning MOCK invoices."),[{id:"in_mock_STRIPE_NULL_cust_inv",customer:e,amount_due:1e4,currency:"nok",status:"open",due_date:Math.floor(Date.now()/1e3)+2592e3,hosted_invoice_url:"#",created:Math.floor(Date.now()/1e3)-86400,error:!0,message:"Stripe not initialized"}];try{console.log(`lib/stripe.ts: Attempting REAL Stripe API call for getCustomerInvoices. Customer: ${e}`);let t=await i.invoices.list({customer:e,limit:100});return console.log(`✅ lib/stripe.ts: Fetched ${t.data.length} REAL Stripe Invoices for customer.`),t.data}catch(t){return console.error("❌ lib/stripe.ts: Error fetching REAL customer invoices:",t),[{id:"in_mock_API_ERROR_cust_inv",customer:e,amount_due:1e4,currency:"nok",status:"open",due_date:Math.floor(Date.now()/1e3)+2592e3,hosted_invoice_url:"#",created:Math.floor(Date.now()/1e3)-86400,error:!0,message:t.message||"Unknown API error fetching invoices"}]}},p=async e=>{if(o("payInvoice - Start",{invoiceId:e}),console.log("--- DEBUG: lib/stripe.ts -> payInvoice --- 'stripe' initialized?",i?"YES":"NO"),!i)return console.warn("⚠️ lib/stripe.ts: Stripe instance is null in payInvoice. Returning MOCK payment status."),{id:e,status:"paid",paid:!0,amount_paid:1e4,currency:"nok",error:!0,message:"Stripe not initialized"};try{console.log(`lib/stripe.ts: Attempting REAL Stripe API call for payInvoice. Invoice ID: ${e}`);let t=await i.invoices.pay(e);return console.log("✅ lib/stripe.ts: REAL Stripe Invoice paid. Status:",t.status),t}catch(t){return console.error("❌ lib/stripe.ts: Error paying REAL Stripe invoice:",t),{id:e,status:"open",paid:!1,error:!0,message:t.message||"Unknown API error paying invoice"}}},m=async e=>{throw o("createTestInvoice - Start",{customerId:e}),console.log("--- DEBUG: lib/stripe.ts -> createTestInvoice --- 'stripe' initialized?",i?"YES":"NO"),console.error("❌ lib/stripe.ts: createTestInvoice called outside development mode."),Error("Test invoices can only be created in development mode")}}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[9276,5972,958,8472],()=>r(36743));module.exports=s})();