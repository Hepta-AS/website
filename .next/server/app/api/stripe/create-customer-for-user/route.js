"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/stripe/create-customer-for-user/route";
exports.ids = ["app/api/stripe/create-customer-for-user/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute&page=%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute.ts&appDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute&page=%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute.ts&appDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_alexanderamundsen_WebstormProjects_wasd_app_api_stripe_create_customer_for_user_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/stripe/create-customer-for-user/route.ts */ \"(rsc)/./app/api/stripe/create-customer-for-user/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/stripe/create-customer-for-user/route\",\n        pathname: \"/api/stripe/create-customer-for-user\",\n        filename: \"route\",\n        bundlePath: \"app/api/stripe/create-customer-for-user/route\"\n    },\n    resolvedPagePath: \"/Users/alexanderamundsen/WebstormProjects/wasd/app/api/stripe/create-customer-for-user/route.ts\",\n    nextConfigOutput,\n    userland: _Users_alexanderamundsen_WebstormProjects_wasd_app_api_stripe_create_customer_for_user_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/stripe/create-customer-for-user/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzdHJpcGUlMkZjcmVhdGUtY3VzdG9tZXItZm9yLXVzZXIlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnN0cmlwZSUyRmNyZWF0ZS1jdXN0b21lci1mb3ItdXNlciUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnN0cmlwZSUyRmNyZWF0ZS1jdXN0b21lci1mb3ItdXNlciUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFsZXhhbmRlcmFtdW5kc2VuJTJGV2Vic3Rvcm1Qcm9qZWN0cyUyRndhc2QlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGYWxleGFuZGVyYW11bmRzZW4lMkZXZWJzdG9ybVByb2plY3RzJTJGd2FzZCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDK0M7QUFDNUg7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZXB0YS1kYXNoYm9hcmQvPzA2YjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2FsZXhhbmRlcmFtdW5kc2VuL1dlYnN0b3JtUHJvamVjdHMvd2FzZC9hcHAvYXBpL3N0cmlwZS9jcmVhdGUtY3VzdG9tZXItZm9yLXVzZXIvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3N0cmlwZS9jcmVhdGUtY3VzdG9tZXItZm9yLXVzZXIvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9zdHJpcGUvY3JlYXRlLWN1c3RvbWVyLWZvci11c2VyXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9zdHJpcGUvY3JlYXRlLWN1c3RvbWVyLWZvci11c2VyL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2FsZXhhbmRlcmFtdW5kc2VuL1dlYnN0b3JtUHJvamVjdHMvd2FzZC9hcHAvYXBpL3N0cmlwZS9jcmVhdGUtY3VzdG9tZXItZm9yLXVzZXIvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3N0cmlwZS9jcmVhdGUtY3VzdG9tZXItZm9yLXVzZXIvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute&page=%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute.ts&appDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/stripe/create-customer-for-user/route.ts":
/*!**********************************************************!*\
  !*** ./app/api/stripe/create-customer-for-user/route.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/auth-helpers-nextjs */ \"(rsc)/./node_modules/@supabase/auth-helpers-nextjs/dist/index.js\");\n/* harmony import */ var _supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var _lib_stripe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/stripe */ \"(rsc)/./lib/stripe.ts\");\n// app/api/stripe/create-customer-for-user/route.ts\n\n\n\n // Anta at createCustomer er justert som tidligere diskutert\nasync function POST(req) {\n    try {\n        // Hent brukerdata direkte fra Supabase Auth sesjonen på serveren\n        // i stedet for å stole på at klienten sender korrekt userId.\n        // Dette er sikrere og mer pålitelig.\n        const supabase = (0,_supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_1__.createRouteHandlerClient)({\n            cookies: next_headers__WEBPACK_IMPORTED_MODULE_2__.cookies\n        });\n        const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();\n        if (authError || !authUser) {\n            console.error(\"Auth error or no user:\", authError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User not authenticated or session expired\"\n            }, {\n                status: 401\n            });\n        }\n        const authUserId = authUser.id; // Dette er brukerens UUID fra auth.users\n        const userEmail = authUser.email;\n        // Hent navn fra request body hvis det sendes, ellers kanskje fra user_metadata\n        const { name: requestName } = await req.json().catch(()=>({\n                name: undefined\n            })); // Håndter hvis body er tom/feil\n        const name = requestName || authUser.user_metadata?.full_name; // Eksempel på fallback\n        if (!authUserId || !userEmail) {\n            // Dette burde ikke skje hvis authUser er gyldig, men som en ekstra sjekk\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User ID or email missing from session\"\n            }, {\n                status: 400\n            });\n        }\n        // Sjekk om brukeren allerede har en customer ID\n        // Bruk 'user_id'-kolonnen (som er UUID) for å slå opp profilen\n        const { data: profile, error: profileError } = await supabase.from(\"profiles\").select(\"stripe_customer_id, id\") // Velg også den numeriske 'id' hvis du trenger den senere\n        .eq(\"user_id\", authUserId) // <--- KORRIGERT: Bruk 'user_id'-kolonnen\n        .single();\n        if (profileError && profileError.code !== \"PGRST116\") {\n            console.error(\"Error fetching profile:\", profileError);\n            // Ikke kast feilen her, la den gå videre til generell feilhåndtering\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Error fetching profile: ${profileError.message}`\n            }, {\n                status: 500\n            });\n        }\n        // If the user already has a customer ID, return it\n        if (profile?.stripe_customer_id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                customerId: profile.stripe_customer_id\n            });\n        }\n        // Create a new Stripe customer\n        // Sørg for at createCustomer-funksjonen i lib/stripe.ts er robust\n        const customer = await (0,_lib_stripe__WEBPACK_IMPORTED_MODULE_3__.createCustomer)(userEmail, name, {\n            supabaseUUID: authUserId\n        }); // Send med supabaseUUID som metadata\n        if (!customer || customer.error || !customer.id) {\n            console.error(\"Failed to create Stripe customer object or customer ID missing:\", customer);\n            const stripeErrorMessage = customer?.message || \"Stripe customer creation returned invalid data\";\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Failed to create Stripe customer: ${stripeErrorMessage}`\n            }, {\n                status: 500\n            });\n        }\n        // Lagre/oppdater customer ID til brukerens profil\n        // Bruk 'user_id' for å identifisere raden, og la 'id' (bigint) auto-inkrementere hvis det er en ny profil\n        const upsertData = {\n            user_id: authUserId,\n            stripe_customer_id: customer.id,\n            updated_at: new Date().toISOString()\n        };\n        // Hvis det er en ny profil, må du også sette inn verdier for andre påkrevde felter\n        // eller la dem ha default-verdier i databasen.\n        // Siden 'id' (bigint) er primærnøkkel og sannsynligvis auto-generert,\n        // trenger vi ikke å spesifisere den for en ny rad hvis 'user_id' er den unike nøkkelen for upsert.\n        // Supabase upsert vil bruke 'user_id' for konfliktløsning hvis du har en UNIQUE constraint på den.\n        // Hvis 'id' (bigint) er den du vil upsert-e på (og du har den fra 'profile' hvis den fantes), juster deretter.\n        // Mest sannsynlig vil du upsert-e basert på user_id for å sikre at én auth-bruker har én profil.\n        // Forutsetter at 'user_id' i 'profiles' har en UNIQUE constraint for at upsert skal fungere som forventet.\n        // Eller at du vil oppdatere basert på den numeriske 'id' hvis profilen ble funnet.\n        let finalUpsertData;\n        if (profile && profile.id) {\n            finalUpsertData = {\n                ...upsertData,\n                id: profile.id\n            };\n        } else {\n            finalUpsertData = {\n                ...upsertData\n            };\n            // Hvis du også setter navn/epost ved profil-opprettelse:\n            if (name) finalUpsertData.name = name;\n        // if (userEmail && !profile) finalUpsertData.email = userEmail; // hvis profiles har en email-kolonne\n        }\n        const { error: upsertError } = await supabase.from(\"profiles\").upsert(finalUpsertData, {\n            onConflict: \"user_id\"\n        }); // Upsert basert på user_id (krever UNIQUE constraint på user_id)\n        // Hvis du vil upsert-e på den numeriske 'id', bruk { onConflict: 'id' } og sørg for at 'id' er i finalUpsertData\n        if (upsertError) {\n            console.error(\"Error saving customer ID to profile:\", upsertError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Error saving Stripe customer ID: ${upsertError.message}`\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            customerId: customer.id\n        });\n    } catch (error) {\n        console.error(\"Unhandled error in create Stripe customer endpoint:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: `Failed to create Stripe customer (unhandled): ${error.message}`\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/stripe/create-customer-for-user/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/stripe.ts":
/*!***********************!*\
  !*** ./lib/stripe.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCustomer: () => (/* binding */ createCustomer),\n/* harmony export */   createInvoice: () => (/* binding */ createInvoice),\n/* harmony export */   createPaymentIntent: () => (/* binding */ createPaymentIntent),\n/* harmony export */   createTestInvoice: () => (/* binding */ createTestInvoice),\n/* harmony export */   formatAmountForStripe: () => (/* binding */ formatAmountForStripe),\n/* harmony export */   formatAmountFromStripe: () => (/* binding */ formatAmountFromStripe),\n/* harmony export */   getCustomerInvoices: () => (/* binding */ getCustomerInvoices),\n/* harmony export */   payInvoice: () => (/* binding */ payInvoice),\n/* harmony export */   stripe: () => (/* binding */ stripe)\n/* harmony export */ });\n/* harmony import */ var stripe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stripe */ \"(rsc)/./node_modules/stripe/esm/stripe.esm.node.js\");\n// lib/stripe.ts\n\nconst isDevelopment = \"development\" === \"development\";\n// --- Funksjon for å initialisere Stripe ---\nconst getStripeInstance = ()=>{\n    const apiKeyFromEnv = \"sk_test_51NTj6ECBZbubqLlTavZEEYr8YqLtMwVYfzIY8EyT3kXY2yuSv6z7hsiQ2omjZnQ1TMIFee3emq7HIcMAe4rWdAoc00CZhpLtEf\";\n    console.log(\"\\n--- DEBUG: lib/stripe.ts -> getStripeInstance ---\");\n    console.log(\"NODE_ENV:\", \"development\");\n    console.log(\"Raw STRIPE_SECRET_KEY from env:\", apiKeyFromEnv);\n    if (!apiKeyFromEnv) {\n        console.warn(\"⚠️ lib/stripe.ts: STRIPE_SECRET_KEY is NOT SET in environment variables. Stripe operations will be mocked or fail.\");\n        return null;\n    }\n    if (apiKeyFromEnv.startsWith(\"sk_live_\")) {\n        console.warn(\"\\uD83D\\uDD34 lib/stripe.ts: WARNING: Attempting to use a LIVE Stripe key (sk_live_).\");\n        if (isDevelopment) {\n            console.warn(\"\\uD83D\\uDD34\\uD83D\\uDD34\\uD83D\\uDD34 lib/stripe.ts: Using a LIVE Stripe key in DEVELOPMENT. This is dangerous and likely unintended. Stripe will NOT be initialized with a live key in dev.\");\n            return null; // Forhindre bruk av live-nøkkel i dev\n        }\n    } else if (apiKeyFromEnv.startsWith(\"sk_test_\")) {\n        console.log(\"✅ lib/stripe.ts: Using a TEST Stripe key (sk_test_). This is good for development.\");\n    } else {\n        // Viser kun de første og siste tegnene av nøkkelen av sikkerhetshensyn i loggen\n        const maskedDisplayKey = apiKeyFromEnv.length > 14 ? apiKeyFromEnv.substring(0, 7) + \"...\" + apiKeyFromEnv.substring(apiKeyFromEnv.length - 4) : apiKeyFromEnv;\n        console.warn(`⚠️ lib/stripe.ts: STRIPE_SECRET_KEY (\"${maskedDisplayKey}\") does not look like a valid Stripe secret key (should start with sk_test_ or sk_live_).`);\n        return null;\n    }\n    try {\n        const maskedDisplayKey = apiKeyFromEnv.length > 14 ? apiKeyFromEnv.substring(0, 7) + \"...\" + apiKeyFromEnv.substring(apiKeyFromEnv.length - 4) : apiKeyFromEnv;\n        console.log(`lib/stripe.ts: Attempting to initialize Stripe with API key: ${maskedDisplayKey}`);\n        const stripeInstance = new stripe__WEBPACK_IMPORTED_MODULE_0__[\"default\"](apiKeyFromEnv, {\n            apiVersion: \"2023-10-16\",\n            typescript: true\n        });\n        console.log(\"✅ lib/stripe.ts: Stripe initialized successfully.\");\n        return stripeInstance;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Failed to initialize Stripe with API key. Error:\", error);\n        return null;\n    }\n};\n// Initialiser Stripe-instansen én gang\nconst stripe = getStripeInstance();\n// --- Hjelpefunksjoner ---\nconst logStripeOperation = (operation, ...args)=>{\n    if (isDevelopment) {\n        console.log(`🔄 lib/stripe.ts: Stripe Operation - ${operation}:`, ...args);\n    }\n};\nconst formatAmountForStripe = (amount)=>{\n    return Math.round(amount * 100); // Konverterer NOK til øre\n};\nconst formatAmountFromStripe = (amount)=>{\n    return amount / 100; // Konverterer øre til NOK\n};\n// --- Stripe API-kall funksjoner ---\nconst createCustomer = async (email, name, metadata)=>{\n    logStripeOperation(\"createCustomer - Start\", {\n        email,\n        name,\n        metadata\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> createCustomer ---\");\n    console.log(\"Is 'stripe' object initialized here?\", stripe ? \"YES\" : \"NO - Stripe key likely missing/invalid in env!\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in createCustomer. Returning MOCK customer.\");\n        return {\n            id: \"cus_mock_STRIPE_NULL_\" + Date.now().toString(36) + Math.random().toString(36).substring(2),\n            email,\n            name,\n            metadata,\n            object: \"customer\",\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: \"Stripe not initialized (null instance), returning mock customer.\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call: customers.create for email: ${email}`);\n        const customerParams = {\n            email\n        };\n        if (name) customerParams.name = name;\n        if (metadata) customerParams.metadata = metadata;\n        const customer = await stripe.customers.create(customerParams);\n        console.log(\"✅ lib/stripe.ts: Stripe customer created successfully via API. ID:\", customer.id);\n        return customer;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error calling Stripe API (customers.create):\", error);\n        return {\n            id: \"cus_mock_API_ERROR_\" + Date.now().toString(36) + Math.random().toString(36).substring(2),\n            email,\n            name,\n            metadata,\n            object: \"customer\",\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: error.message || \"Unknown error during Stripe API call to create customer\"\n        };\n    }\n};\nconst createPaymentIntent = async (amount, currency = \"nok\", customerId)=>{\n    logStripeOperation(\"createPaymentIntent - Start\", {\n        amount,\n        currency,\n        customerId\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> createPaymentIntent ---\");\n    console.log(\"Is 'stripe' object initialized here?\", stripe ? \"YES\" : \"NO - Stripe key likely missing/invalid in env!\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in createPaymentIntent. Returning MOCK Payment Intent.\");\n        const mockClientSecret = \"pi_mock_secret_STRIPE_NULL_\" + Date.now().toString(36) + Math.random().toString(36).substring(2);\n        return {\n            id: \"pi_mock_STRIPE_NULL_\" + Date.now().toString(36) + Math.random().toString(36).substring(2),\n            amount: formatAmountForStripe(amount),\n            currency,\n            client_secret: mockClientSecret,\n            customer: customerId,\n            status: \"requires_payment_method\",\n            object: \"payment_intent\",\n            error: true,\n            message: \"Stripe not initialized (null instance), returning mock payment intent.\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call: paymentIntents.create. Amount: ${amount}, Currency: ${currency}, CustomerID: ${customerId || \"None\"}`);\n        const paymentIntentParams = {\n            amount: formatAmountForStripe(amount),\n            currency,\n            automatic_payment_methods: {\n                enabled: true\n            }\n        };\n        if (customerId) {\n            paymentIntentParams.customer = customerId;\n        }\n        const paymentIntent = await stripe.paymentIntents.create(paymentIntentParams);\n        console.log(\"✅ lib/stripe.ts: REAL Stripe Payment Intent created. Client Secret starts with:\", paymentIntent.client_secret?.substring(0, 15) + \"...\");\n        return paymentIntent;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error calling Stripe API (paymentIntents.create):\", error);\n        const mockClientSecret = \"pi_mock_secret_API_ERROR_\" + Date.now().toString(36) + Math.random().toString(36).substring(2);\n        return {\n            id: \"pi_mock_API_ERROR_\" + Date.now().toString(36) + Math.random().toString(36).substring(2),\n            amount: formatAmountForStripe(amount),\n            currency,\n            client_secret: mockClientSecret,\n            customer: customerId,\n            status: \"requires_payment_method\",\n            object: \"payment_intent\",\n            error: true,\n            message: error.message || \"Unknown error during Stripe API call to create payment intent\"\n        };\n    }\n};\n// --- Dine andre Stripe-hjelpefunksjoner ---\n// Du bør gå gjennom disse og legge til lignende `if (!stripe)` sjekker og logging\n// hvis du vil at de skal håndtere manglende Stripe-initialisering grasiøst\n// eller alltid prøve ekte kall hvis `stripe` er tilgjengelig.\nconst createInvoice = async (customerId, description, amount, currency = \"nok\")=>{\n    logStripeOperation(\"createInvoice - Start\", {\n        customerId,\n        description,\n        amount,\n        currency\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> createInvoice --- 'stripe' initialized?\", stripe ? \"YES\" : \"NO\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in createInvoice. Returning MOCK invoice.\");\n        return {\n            id: \"in_mock_STRIPE_NULL_\" + Date.now().toString(36),\n            customer: customerId,\n            amount_due: formatAmountForStripe(amount),\n            currency,\n            description,\n            status: \"open\",\n            due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: \"Stripe not initialized\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call for createInvoice. Customer: ${customerId}`);\n        const invoiceItem = await stripe.invoiceItems.create({\n            customer: customerId,\n            amount: formatAmountForStripe(amount),\n            currency,\n            description\n        });\n        const invoice = await stripe.invoices.create({\n            customer: customerId,\n            auto_advance: true,\n            collection_method: \"send_invoice\",\n            days_until_due: 30\n        });\n        const finalizedInvoice = await stripe.invoices.finalizeInvoice(invoice.id);\n        await stripe.invoices.sendInvoice(finalizedInvoice.id);\n        console.log(\"✅ lib/stripe.ts: REAL Stripe Invoice created and sent. ID:\", finalizedInvoice.id);\n        return finalizedInvoice;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error creating REAL Stripe invoice:\", error);\n        return {\n            id: \"in_mock_API_ERROR_\" + Date.now().toString(36),\n            customer: customerId,\n            amount_due: formatAmountForStripe(amount),\n            currency,\n            description,\n            status: \"open\",\n            due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: error.message || \"Unknown API error creating invoice\"\n        };\n    }\n};\nconst getCustomerInvoices = async (customerId)=>{\n    logStripeOperation(\"getCustomerInvoices - Start\", {\n        customerId\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> getCustomerInvoices --- 'stripe' initialized?\", stripe ? \"YES\" : \"NO\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in getCustomerInvoices. Returning MOCK invoices.\");\n        return [\n            {\n                id: \"in_mock_STRIPE_NULL_cust_inv\",\n                customer: customerId,\n                amount_due: 10000,\n                currency: \"nok\",\n                status: \"open\",\n                due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n                hosted_invoice_url: \"#\",\n                created: Math.floor(Date.now() / 1000) - 86400,\n                error: true,\n                message: \"Stripe not initialized\"\n            }\n        ];\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call for getCustomerInvoices. Customer: ${customerId}`);\n        const invoices = await stripe.invoices.list({\n            customer: customerId,\n            limit: 100\n        });\n        console.log(`✅ lib/stripe.ts: Fetched ${invoices.data.length} REAL Stripe Invoices for customer.`);\n        return invoices.data;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error fetching REAL customer invoices:\", error);\n        return [\n            {\n                id: \"in_mock_API_ERROR_cust_inv\",\n                customer: customerId,\n                amount_due: 10000,\n                currency: \"nok\",\n                status: \"open\",\n                due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n                hosted_invoice_url: \"#\",\n                created: Math.floor(Date.now() / 1000) - 86400,\n                error: true,\n                message: error.message || \"Unknown API error fetching invoices\"\n            }\n        ];\n    }\n};\nconst payInvoice = async (invoiceId)=>{\n    logStripeOperation(\"payInvoice - Start\", {\n        invoiceId\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> payInvoice --- 'stripe' initialized?\", stripe ? \"YES\" : \"NO\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in payInvoice. Returning MOCK payment status.\");\n        return {\n            id: invoiceId,\n            status: \"paid\",\n            paid: true,\n            amount_paid: 10000,\n            currency: \"nok\",\n            error: true,\n            message: \"Stripe not initialized\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call for payInvoice. Invoice ID: ${invoiceId}`);\n        const invoice = await stripe.invoices.pay(invoiceId);\n        console.log(\"✅ lib/stripe.ts: REAL Stripe Invoice paid. Status:\", invoice.status);\n        return invoice;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error paying REAL Stripe invoice:\", error);\n        return {\n            id: invoiceId,\n            status: \"open\",\n            paid: false,\n            /*amount_paid might not be set*/ error: true,\n            message: error.message || \"Unknown API error paying invoice\"\n        };\n    }\n};\nconst createTestInvoice = async (customerId)=>{\n    logStripeOperation(\"createTestInvoice - Start\", {\n        customerId\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> createTestInvoice --- 'stripe' initialized?\", stripe ? \"YES\" : \"NO\");\n    if (!isDevelopment) {\n        console.error(\"❌ lib/stripe.ts: createTestInvoice called outside development mode.\");\n        throw new Error(\"Test invoices can only be created in development mode\");\n    }\n    if (!customerId) {\n        console.error(\"❌ lib/stripe.ts: Customer ID is required for createTestInvoice.\");\n        throw new Error(\"Customer ID is required to create a test invoice\");\n    }\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in createTestInvoice. Returning MOCK test invoice.\");\n        const amount = Math.floor(Math.random() * 900) + 100;\n        return {\n            id: \"in_test_mock_STRIPE_NULL_\" + Date.now().toString(36),\n            number: \"TEST_MOCK\" + Math.floor(Math.random() * 10000),\n            customer: customerId,\n            amount_due: formatAmountForStripe(amount),\n            currency: \"nok\",\n            description: \"Mock Test Invoice - Stripe Not Initialized\",\n            status: \"open\",\n            due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: \"Stripe not initialized\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call for createTestInvoice. Customer: ${customerId}`);\n        const amount = Math.floor(Math.random() * 900) + 100;\n        const invoiceItem = await stripe.invoiceItems.create({\n            customer: customerId,\n            amount: formatAmountForStripe(amount),\n            currency: \"nok\",\n            description: \"Test Invoice - Development Only (REAL CALL)\"\n        });\n        const invoice = await stripe.invoices.create({\n            customer: customerId,\n            auto_advance: true,\n            collection_method: \"send_invoice\",\n            days_until_due: 30\n        });\n        const finalizedInvoice = await stripe.invoices.finalizeInvoice(invoice.id);\n        console.log(\"✅ lib/stripe.ts: REAL Stripe Test Invoice created. ID:\", finalizedInvoice.id);\n        return finalizedInvoice;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error creating REAL test invoice:\", error);\n        const amount = Math.floor(Math.random() * 900) + 100;\n        return {\n            id: \"in_test_mock_API_ERROR_\" + Date.now().toString(36),\n            number: \"TEST_MOCK_ERROR\" + Math.floor(Math.random() * 10000),\n            customer: customerId,\n            amount_due: formatAmountForStripe(amount),\n            currency: \"nok\",\n            description: \"Mock Test Invoice - API Error\",\n            status: \"open\",\n            due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: error.message || \"Unknown error\"\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/stripe.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/set-cookie-parser","vendor-chunks/webidl-conversions","vendor-chunks/jose","vendor-chunks/stripe","vendor-chunks/qs","vendor-chunks/object-inspect","vendor-chunks/get-intrinsic","vendor-chunks/side-channel-list","vendor-chunks/side-channel-weakmap","vendor-chunks/has-symbols","vendor-chunks/function-bind","vendor-chunks/side-channel-map","vendor-chunks/side-channel","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/call-bound","vendor-chunks/es-errors","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute&page=%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstripe%2Fcreate-customer-for-user%2Froute.ts&appDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();