"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/stripe/webhook/route";
exports.ids = ["app/api/stripe/webhook/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fstripe%2Fwebhook%2Froute&page=%2Fapi%2Fstripe%2Fwebhook%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstripe%2Fwebhook%2Froute.ts&appDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fstripe%2Fwebhook%2Froute&page=%2Fapi%2Fstripe%2Fwebhook%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstripe%2Fwebhook%2Froute.ts&appDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_alexanderamundsen_WebstormProjects_wasd_app_api_stripe_webhook_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/stripe/webhook/route.ts */ \"(rsc)/./app/api/stripe/webhook/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/stripe/webhook/route\",\n        pathname: \"/api/stripe/webhook\",\n        filename: \"route\",\n        bundlePath: \"app/api/stripe/webhook/route\"\n    },\n    resolvedPagePath: \"/Users/alexanderamundsen/WebstormProjects/wasd/app/api/stripe/webhook/route.ts\",\n    nextConfigOutput,\n    userland: _Users_alexanderamundsen_WebstormProjects_wasd_app_api_stripe_webhook_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/stripe/webhook/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzdHJpcGUlMkZ3ZWJob29rJTJGcm91dGUmcGFnZT0lMkZhcGklMkZzdHJpcGUlMkZ3ZWJob29rJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGc3RyaXBlJTJGd2ViaG9vayUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFsZXhhbmRlcmFtdW5kc2VuJTJGV2Vic3Rvcm1Qcm9qZWN0cyUyRndhc2QlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGYWxleGFuZGVyYW11bmRzZW4lMkZXZWJzdG9ybVByb2plY3RzJTJGd2FzZCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDOEI7QUFDM0c7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZXB0YS1kYXNoYm9hcmQvPzdkZmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2FsZXhhbmRlcmFtdW5kc2VuL1dlYnN0b3JtUHJvamVjdHMvd2FzZC9hcHAvYXBpL3N0cmlwZS93ZWJob29rL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9zdHJpcGUvd2ViaG9vay9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3N0cmlwZS93ZWJob29rXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9zdHJpcGUvd2ViaG9vay9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9hbGV4YW5kZXJhbXVuZHNlbi9XZWJzdG9ybVByb2plY3RzL3dhc2QvYXBwL2FwaS9zdHJpcGUvd2ViaG9vay9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvc3RyaXBlL3dlYmhvb2svcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fstripe%2Fwebhook%2Froute&page=%2Fapi%2Fstripe%2Fwebhook%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstripe%2Fwebhook%2Froute.ts&appDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/stripe/webhook/route.ts":
/*!*****************************************!*\
  !*** ./app/api/stripe/webhook/route.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_stripe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/stripe */ \"(rsc)/./lib/stripe.ts\");\n/* harmony import */ var _supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @supabase/auth-helpers-nextjs */ \"(rsc)/./node_modules/@supabase/auth-helpers-nextjs/dist/index.js\");\n/* harmony import */ var _supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n// api/stripe/webhook/route.ts\n\n// REMOVED: import { headers } from \"next/headers\"; // We will get headers directly from req.headers\n // Your Stripe lib initialization\n\n // Keep for Supabase\n// const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET; // We will get this inside the function\nconsole.log(\"\\uD83E\\uDE9D /api/stripe/webhook/route.ts file TOP LEVEL LOG\"); // Check if file is loaded\nasync function POST(req) {\n    console.log(\"\\uD83E\\uDE9D POST /api/stripe/webhook ROUTE HANDLER INVOKED\");\n    console.log(\"Method:\", req.method);\n    // Log all incoming headers\n    const headerEntries = [];\n    for (const pair of req.headers.entries()){\n        headerEntries.push([\n            pair[0],\n            pair[1]\n        ]);\n    }\n    console.log(\"Incoming Headers:\", JSON.stringify(Object.fromEntries(headerEntries), null, 2));\n    const body = await req.text();\n    const signature = req.headers.get(\"stripe-signature\"); // Get signature directly from req.headers\n    console.log(\"\\uD83D\\uDCC4 Raw Body received (first 500 chars):\", body.substring(0, 500));\n    console.log(\"\\uD83D\\uDD11 Signature Header value received:\", signature); // Will be null if not present\n    const webhookSecret = \"whsec_81bb8c2505b7b8af2511740588e6f59407c04246bbd196ad7fce2b43367fbe69\";\n    console.log(\"\\uD83E\\uDD2B Webhook Secret used from env:\", webhookSecret); // Check if it's loaded correctly\n    let event;\n    // 1. Validate prerequisites for signature verification\n    if (!signature) {\n        console.error(\"❌ CRITICAL: Stripe-Signature header is missing or null in req.headers!\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Stripe-Signature header missing\"\n        }, {\n            status: 400\n        });\n    }\n    if (!webhookSecret) {\n        console.error(\"❌ CRITICAL: STRIPE_WEBHOOK_SECRET is not set in environment!\");\n        // This is a server configuration issue.\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Webhook secret not configured on server\"\n        }, {\n            status: 500\n        });\n    }\n    if (!body) {\n        // This case is unlikely if req.text() succeeds but good to have\n        console.error(\"❌ CRITICAL: Request body is empty after req.text()!\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Request body is empty\"\n        }, {\n            status: 400\n        });\n    }\n    if (!_lib_stripe__WEBPACK_IMPORTED_MODULE_1__.stripe) {\n        console.error(\"❌ CRITICAL: Stripe instance from '@/lib/stripe' is not initialized!\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Stripe service unavailable\"\n        }, {\n            status: 500\n        });\n    }\n    // 2. Attempt to construct the event (verify signature)\n    try {\n        console.log(\"Attempting stripe.webhooks.constructEvent...\");\n        event = _lib_stripe__WEBPACK_IMPORTED_MODULE_1__.stripe.webhooks.constructEvent(body, signature, webhookSecret);\n        console.log(\"✅ Stripe Webhook Event Verified:\", event.type, `ID: ${event.id}`);\n    } catch (err) {\n        console.error(`❌ Webhook signature verification failed: ${err.message}`, {\n            errorName: err.name,\n            errorMessage: err.message\n        });\n        // The error from constructEvent often includes hints, e.g. \"No signatures found matching...\"\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: `Webhook Error: ${err.message}`\n        }, {\n            status: 400\n        });\n    }\n    // 3. Log the received event type (already done above after successful verification)\n    const supabase = (0,_supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_2__.createRouteHandlerClient)({\n        cookies: next_headers__WEBPACK_IMPORTED_MODULE_3__.cookies\n    }); // Assuming cookies() works here as intended\n    // 4. Handle the event\n    console.log(`🔄 Processing event type: ${event.type}`);\n    try {\n        switch(event.type){\n            case \"invoice.paid\":\n                const invoicePaid = event.data.object;\n                console.log(`  Processing invoice.paid for invoice ID: ${invoicePaid.id}, Customer: ${invoicePaid.customer}`);\n                const { error: paidError } = await supabase.from(\"invoices\").update({\n                    status: \"paid\",\n                    paid_at: new Date().toISOString()\n                }).eq(\"stripe_invoice_id\", invoicePaid.id);\n                if (paidError) {\n                    console.error(`  ❌ Supabase error updating invoice ${invoicePaid.id} to paid:`, paidError);\n                } else {\n                    console.log(`  ✅ Supabase: Invoice ${invoicePaid.id} marked as paid.`);\n                }\n                break;\n            case \"invoice.payment_failed\":\n                const invoiceFailed = event.data.object;\n                console.log(`  Processing invoice.payment_failed for invoice ID: ${invoiceFailed.id}, Customer: ${invoiceFailed.customer}`);\n                const { error: failedError } = await supabase.from(\"invoices\").update({\n                    status: \"payment_failed\"\n                }).eq(\"stripe_invoice_id\", invoiceFailed.id);\n                if (failedError) {\n                    console.error(`  ❌ Supabase error updating invoice ${invoiceFailed.id} to payment_failed:`, failedError);\n                } else {\n                    console.log(`  ✅ Supabase: Invoice ${invoiceFailed.id} marked as payment_failed.`);\n                }\n                break;\n            case \"customer.subscription.created\":\n                const subscription = event.data.object;\n                console.log(`  Processing customer.subscription.created for subscription ID: ${subscription.id}, Customer: ${subscription.customer}`);\n                break;\n            default:\n                console.log(`  🤷‍♀️ Unhandled event type: ${event.type}`);\n        }\n    } catch (error) {\n        console.error(`❌ Error during event handling for ${event.id} (type: ${event.type}): ${error.message}`, error);\n    }\n    // 5. Acknowledge receipt to Stripe\n    console.log(`👍 Event ${event.id} processed. Responding 200 to Stripe.`);\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        received: true\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/stripe/webhook/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/stripe.ts":
/*!***********************!*\
  !*** ./lib/stripe.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCustomer: () => (/* binding */ createCustomer),\n/* harmony export */   createInvoice: () => (/* binding */ createInvoice),\n/* harmony export */   createPaymentIntent: () => (/* binding */ createPaymentIntent),\n/* harmony export */   createTestInvoice: () => (/* binding */ createTestInvoice),\n/* harmony export */   formatAmountForStripe: () => (/* binding */ formatAmountForStripe),\n/* harmony export */   formatAmountFromStripe: () => (/* binding */ formatAmountFromStripe),\n/* harmony export */   getCustomerInvoices: () => (/* binding */ getCustomerInvoices),\n/* harmony export */   payInvoice: () => (/* binding */ payInvoice),\n/* harmony export */   stripe: () => (/* binding */ stripe)\n/* harmony export */ });\n/* harmony import */ var stripe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stripe */ \"(rsc)/./node_modules/stripe/esm/stripe.esm.node.js\");\n// lib/stripe.ts\n\nconst isDevelopment = \"development\" === \"development\";\n// --- Funksjon for å initialisere Stripe ---\nconst getStripeInstance = ()=>{\n    const apiKeyFromEnv = \"sk_test_51NTj6ECBZbubqLlTavZEEYr8YqLtMwVYfzIY8EyT3kXY2yuSv6z7hsiQ2omjZnQ1TMIFee3emq7HIcMAe4rWdAoc00CZhpLtEf\";\n    console.log(\"\\n--- DEBUG: lib/stripe.ts -> getStripeInstance ---\");\n    console.log(\"NODE_ENV:\", \"development\");\n    console.log(\"Raw STRIPE_SECRET_KEY from env:\", apiKeyFromEnv);\n    if (!apiKeyFromEnv) {\n        console.warn(\"⚠️ lib/stripe.ts: STRIPE_SECRET_KEY is NOT SET in environment variables. Stripe operations will be mocked or fail.\");\n        return null;\n    }\n    if (apiKeyFromEnv.startsWith(\"sk_live_\")) {\n        console.warn(\"\\uD83D\\uDD34 lib/stripe.ts: WARNING: Attempting to use a LIVE Stripe key (sk_live_).\");\n        if (isDevelopment) {\n            console.warn(\"\\uD83D\\uDD34\\uD83D\\uDD34\\uD83D\\uDD34 lib/stripe.ts: Using a LIVE Stripe key in DEVELOPMENT. This is dangerous and likely unintended. Stripe will NOT be initialized with a live key in dev.\");\n            return null; // Forhindre bruk av live-nøkkel i dev\n        }\n    } else if (apiKeyFromEnv.startsWith(\"sk_test_\")) {\n        console.log(\"✅ lib/stripe.ts: Using a TEST Stripe key (sk_test_). This is good for development.\");\n    } else {\n        // Viser kun de første og siste tegnene av nøkkelen av sikkerhetshensyn i loggen\n        const maskedDisplayKey = apiKeyFromEnv.length > 14 ? apiKeyFromEnv.substring(0, 7) + \"...\" + apiKeyFromEnv.substring(apiKeyFromEnv.length - 4) : apiKeyFromEnv;\n        console.warn(`⚠️ lib/stripe.ts: STRIPE_SECRET_KEY (\"${maskedDisplayKey}\") does not look like a valid Stripe secret key (should start with sk_test_ or sk_live_).`);\n        return null;\n    }\n    try {\n        const maskedDisplayKey = apiKeyFromEnv.length > 14 ? apiKeyFromEnv.substring(0, 7) + \"...\" + apiKeyFromEnv.substring(apiKeyFromEnv.length - 4) : apiKeyFromEnv;\n        console.log(`lib/stripe.ts: Attempting to initialize Stripe with API key: ${maskedDisplayKey}`);\n        const stripeInstance = new stripe__WEBPACK_IMPORTED_MODULE_0__[\"default\"](apiKeyFromEnv, {\n            apiVersion: \"2023-10-16\",\n            typescript: true\n        });\n        console.log(\"✅ lib/stripe.ts: Stripe initialized successfully.\");\n        return stripeInstance;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Failed to initialize Stripe with API key. Error:\", error);\n        return null;\n    }\n};\n// Initialiser Stripe-instansen én gang\nconst stripe = getStripeInstance();\n// --- Hjelpefunksjoner ---\nconst logStripeOperation = (operation, ...args)=>{\n    if (isDevelopment) {\n        console.log(`🔄 lib/stripe.ts: Stripe Operation - ${operation}:`, ...args);\n    }\n};\nconst formatAmountForStripe = (amount)=>{\n    return Math.round(amount * 100); // Konverterer NOK til øre\n};\nconst formatAmountFromStripe = (amount)=>{\n    return amount / 100; // Konverterer øre til NOK\n};\n// --- Stripe API-kall funksjoner ---\nconst createCustomer = async (email, name, metadata)=>{\n    logStripeOperation(\"createCustomer - Start\", {\n        email,\n        name,\n        metadata\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> createCustomer ---\");\n    console.log(\"Is 'stripe' object initialized here?\", stripe ? \"YES\" : \"NO - Stripe key likely missing/invalid in env!\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in createCustomer. Returning MOCK customer.\");\n        return {\n            id: \"cus_mock_STRIPE_NULL_\" + Date.now().toString(36) + Math.random().toString(36).substring(2),\n            email,\n            name,\n            metadata,\n            object: \"customer\",\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: \"Stripe not initialized (null instance), returning mock customer.\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call: customers.create for email: ${email}`);\n        const customerParams = {\n            email\n        };\n        if (name) customerParams.name = name;\n        if (metadata) customerParams.metadata = metadata;\n        const customer = await stripe.customers.create(customerParams);\n        console.log(\"✅ lib/stripe.ts: Stripe customer created successfully via API. ID:\", customer.id);\n        return customer;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error calling Stripe API (customers.create):\", error);\n        return {\n            id: \"cus_mock_API_ERROR_\" + Date.now().toString(36) + Math.random().toString(36).substring(2),\n            email,\n            name,\n            metadata,\n            object: \"customer\",\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: error.message || \"Unknown error during Stripe API call to create customer\"\n        };\n    }\n};\nconst createPaymentIntent = async (amount, currency = \"nok\", customerId)=>{\n    logStripeOperation(\"createPaymentIntent - Start\", {\n        amount,\n        currency,\n        customerId\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> createPaymentIntent ---\");\n    console.log(\"Is 'stripe' object initialized here?\", stripe ? \"YES\" : \"NO - Stripe key likely missing/invalid in env!\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in createPaymentIntent. Returning MOCK Payment Intent.\");\n        const mockClientSecret = \"pi_mock_secret_STRIPE_NULL_\" + Date.now().toString(36) + Math.random().toString(36).substring(2);\n        return {\n            id: \"pi_mock_STRIPE_NULL_\" + Date.now().toString(36) + Math.random().toString(36).substring(2),\n            amount: formatAmountForStripe(amount),\n            currency,\n            client_secret: mockClientSecret,\n            customer: customerId,\n            status: \"requires_payment_method\",\n            object: \"payment_intent\",\n            error: true,\n            message: \"Stripe not initialized (null instance), returning mock payment intent.\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call: paymentIntents.create. Amount: ${amount}, Currency: ${currency}, CustomerID: ${customerId || \"None\"}`);\n        const paymentIntentParams = {\n            amount: formatAmountForStripe(amount),\n            currency,\n            automatic_payment_methods: {\n                enabled: true\n            }\n        };\n        if (customerId) {\n            paymentIntentParams.customer = customerId;\n        }\n        const paymentIntent = await stripe.paymentIntents.create(paymentIntentParams);\n        console.log(\"✅ lib/stripe.ts: REAL Stripe Payment Intent created. Client Secret starts with:\", paymentIntent.client_secret?.substring(0, 15) + \"...\");\n        return paymentIntent;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error calling Stripe API (paymentIntents.create):\", error);\n        const mockClientSecret = \"pi_mock_secret_API_ERROR_\" + Date.now().toString(36) + Math.random().toString(36).substring(2);\n        return {\n            id: \"pi_mock_API_ERROR_\" + Date.now().toString(36) + Math.random().toString(36).substring(2),\n            amount: formatAmountForStripe(amount),\n            currency,\n            client_secret: mockClientSecret,\n            customer: customerId,\n            status: \"requires_payment_method\",\n            object: \"payment_intent\",\n            error: true,\n            message: error.message || \"Unknown error during Stripe API call to create payment intent\"\n        };\n    }\n};\n// --- Dine andre Stripe-hjelpefunksjoner ---\n// Du bør gå gjennom disse og legge til lignende `if (!stripe)` sjekker og logging\n// hvis du vil at de skal håndtere manglende Stripe-initialisering grasiøst\n// eller alltid prøve ekte kall hvis `stripe` er tilgjengelig.\nconst createInvoice = async (customerId, description, amount, currency = \"nok\")=>{\n    logStripeOperation(\"createInvoice - Start\", {\n        customerId,\n        description,\n        amount,\n        currency\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> createInvoice --- 'stripe' initialized?\", stripe ? \"YES\" : \"NO\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in createInvoice. Returning MOCK invoice.\");\n        return {\n            id: \"in_mock_STRIPE_NULL_\" + Date.now().toString(36),\n            customer: customerId,\n            amount_due: formatAmountForStripe(amount),\n            currency,\n            description,\n            status: \"open\",\n            due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: \"Stripe not initialized\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call for createInvoice. Customer: ${customerId}`);\n        const invoiceItem = await stripe.invoiceItems.create({\n            customer: customerId,\n            amount: formatAmountForStripe(amount),\n            currency,\n            description\n        });\n        const invoice = await stripe.invoices.create({\n            customer: customerId,\n            auto_advance: true,\n            collection_method: \"send_invoice\",\n            days_until_due: 30\n        });\n        const finalizedInvoice = await stripe.invoices.finalizeInvoice(invoice.id);\n        await stripe.invoices.sendInvoice(finalizedInvoice.id);\n        console.log(\"✅ lib/stripe.ts: REAL Stripe Invoice created and sent. ID:\", finalizedInvoice.id);\n        return finalizedInvoice;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error creating REAL Stripe invoice:\", error);\n        return {\n            id: \"in_mock_API_ERROR_\" + Date.now().toString(36),\n            customer: customerId,\n            amount_due: formatAmountForStripe(amount),\n            currency,\n            description,\n            status: \"open\",\n            due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: error.message || \"Unknown API error creating invoice\"\n        };\n    }\n};\nconst getCustomerInvoices = async (customerId)=>{\n    logStripeOperation(\"getCustomerInvoices - Start\", {\n        customerId\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> getCustomerInvoices --- 'stripe' initialized?\", stripe ? \"YES\" : \"NO\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in getCustomerInvoices. Returning MOCK invoices.\");\n        return [\n            {\n                id: \"in_mock_STRIPE_NULL_cust_inv\",\n                customer: customerId,\n                amount_due: 10000,\n                currency: \"nok\",\n                status: \"open\",\n                due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n                hosted_invoice_url: \"#\",\n                created: Math.floor(Date.now() / 1000) - 86400,\n                error: true,\n                message: \"Stripe not initialized\"\n            }\n        ];\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call for getCustomerInvoices. Customer: ${customerId}`);\n        const invoices = await stripe.invoices.list({\n            customer: customerId,\n            limit: 100\n        });\n        console.log(`✅ lib/stripe.ts: Fetched ${invoices.data.length} REAL Stripe Invoices for customer.`);\n        return invoices.data;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error fetching REAL customer invoices:\", error);\n        return [\n            {\n                id: \"in_mock_API_ERROR_cust_inv\",\n                customer: customerId,\n                amount_due: 10000,\n                currency: \"nok\",\n                status: \"open\",\n                due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n                hosted_invoice_url: \"#\",\n                created: Math.floor(Date.now() / 1000) - 86400,\n                error: true,\n                message: error.message || \"Unknown API error fetching invoices\"\n            }\n        ];\n    }\n};\nconst payInvoice = async (invoiceId)=>{\n    logStripeOperation(\"payInvoice - Start\", {\n        invoiceId\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> payInvoice --- 'stripe' initialized?\", stripe ? \"YES\" : \"NO\");\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in payInvoice. Returning MOCK payment status.\");\n        return {\n            id: invoiceId,\n            status: \"paid\",\n            paid: true,\n            amount_paid: 10000,\n            currency: \"nok\",\n            error: true,\n            message: \"Stripe not initialized\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call for payInvoice. Invoice ID: ${invoiceId}`);\n        const invoice = await stripe.invoices.pay(invoiceId);\n        console.log(\"✅ lib/stripe.ts: REAL Stripe Invoice paid. Status:\", invoice.status);\n        return invoice;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error paying REAL Stripe invoice:\", error);\n        return {\n            id: invoiceId,\n            status: \"open\",\n            paid: false,\n            /*amount_paid might not be set*/ error: true,\n            message: error.message || \"Unknown API error paying invoice\"\n        };\n    }\n};\nconst createTestInvoice = async (customerId)=>{\n    logStripeOperation(\"createTestInvoice - Start\", {\n        customerId\n    });\n    console.log(\"--- DEBUG: lib/stripe.ts -> createTestInvoice --- 'stripe' initialized?\", stripe ? \"YES\" : \"NO\");\n    if (!isDevelopment) {\n        console.error(\"❌ lib/stripe.ts: createTestInvoice called outside development mode.\");\n        throw new Error(\"Test invoices can only be created in development mode\");\n    }\n    if (!customerId) {\n        console.error(\"❌ lib/stripe.ts: Customer ID is required for createTestInvoice.\");\n        throw new Error(\"Customer ID is required to create a test invoice\");\n    }\n    if (!stripe) {\n        console.warn(\"⚠️ lib/stripe.ts: Stripe instance is null in createTestInvoice. Returning MOCK test invoice.\");\n        const amount = Math.floor(Math.random() * 900) + 100;\n        return {\n            id: \"in_test_mock_STRIPE_NULL_\" + Date.now().toString(36),\n            number: \"TEST_MOCK\" + Math.floor(Math.random() * 10000),\n            customer: customerId,\n            amount_due: formatAmountForStripe(amount),\n            currency: \"nok\",\n            description: \"Mock Test Invoice - Stripe Not Initialized\",\n            status: \"open\",\n            due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: \"Stripe not initialized\"\n        };\n    }\n    try {\n        console.log(`lib/stripe.ts: Attempting REAL Stripe API call for createTestInvoice. Customer: ${customerId}`);\n        const amount = Math.floor(Math.random() * 900) + 100;\n        const invoiceItem = await stripe.invoiceItems.create({\n            customer: customerId,\n            amount: formatAmountForStripe(amount),\n            currency: \"nok\",\n            description: \"Test Invoice - Development Only (REAL CALL)\"\n        });\n        const invoice = await stripe.invoices.create({\n            customer: customerId,\n            auto_advance: true,\n            collection_method: \"send_invoice\",\n            days_until_due: 30\n        });\n        const finalizedInvoice = await stripe.invoices.finalizeInvoice(invoice.id);\n        console.log(\"✅ lib/stripe.ts: REAL Stripe Test Invoice created. ID:\", finalizedInvoice.id);\n        return finalizedInvoice;\n    } catch (error) {\n        console.error(\"❌ lib/stripe.ts: Error creating REAL test invoice:\", error);\n        const amount = Math.floor(Math.random() * 900) + 100;\n        return {\n            id: \"in_test_mock_API_ERROR_\" + Date.now().toString(36),\n            number: \"TEST_MOCK_ERROR\" + Math.floor(Math.random() * 10000),\n            customer: customerId,\n            amount_due: formatAmountForStripe(amount),\n            currency: \"nok\",\n            description: \"Mock Test Invoice - API Error\",\n            status: \"open\",\n            due_date: Math.floor(Date.now() / 1000) + 86400 * 30,\n            created: Math.floor(Date.now() / 1000),\n            error: true,\n            message: error.message || \"Unknown error\"\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/stripe.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/set-cookie-parser","vendor-chunks/webidl-conversions","vendor-chunks/jose","vendor-chunks/stripe","vendor-chunks/qs","vendor-chunks/object-inspect","vendor-chunks/get-intrinsic","vendor-chunks/side-channel-list","vendor-chunks/side-channel-weakmap","vendor-chunks/has-symbols","vendor-chunks/function-bind","vendor-chunks/side-channel-map","vendor-chunks/side-channel","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/call-bound","vendor-chunks/es-errors","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fstripe%2Fwebhook%2Froute&page=%2Fapi%2Fstripe%2Fwebhook%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fstripe%2Fwebhook%2Froute.ts&appDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falexanderamundsen%2FWebstormProjects%2Fwasd&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();